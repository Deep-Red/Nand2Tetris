// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input
 * holds the value of this location. If the current instruction needs
 * to write a value to M, the value is placed in outM, the address
 * of the target location is placed in the addressM output, and the
 * writeM control bit is asserted. (When writeM==0, any value may
 * appear in outM). The outM and writeM outputs are combinational:
 * they are affected instantaneously by the execution of the current
 * instruction. The addressM and pc outputs are clocked: although they
 * are affected by the execution of the current instruction, they commit
 * to their new values only in the next time step. If reset==1 then the
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather
 * than to the address resulting from executing the current instruction.
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M?
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    //Decode instruction: load values
    And(a=instruction[5],b=instruction[15],out=toa);    //A
    Not(in=instruction[15],out=Ainst);                  //A
    Or(a=Ainst,b=toa,out=loada);                        //A
    And(a=instruction[4],b=instruction[15],out=loadd);  //D

    //Decode instruction: writeM
    And(a=instruction[15],b=instruction[3],out=writeM); //M

    //Decode instruction: jump cond
    //Jump < 0
    And(a=instruction[2],b=ng,out=jlt);
    // Jump == 0
    And(a=instruction[1],b=zr,out=jeq);
    // Jump <= 0
    Or(a=jlt,b=jeq,out=jle);
    //Jump > 0
    Not(in=ng,out=ing);
    Not(in=zr,out=izr);
    And(a=ing,b=izr,out=pos);
    And(a=instruction[0],b=pos,out=jgt);
    //Jump ?
    Or(a=jle,b=jgt,out=jmpifc);
    And(a=instruction[15],b=jmpifc,out=jmp);

    //Registers
    //Set A
    Mux16(a=aluout,b=instruction,sel=Ainst,out=m1out);
    ARegister(in=m1out,load=loada,out=arout,out[0..14]=addressM);
    //Set D
    DRegister(in=aluout,load=loadd,out=drout);

    //Select A register or Memory address for input to alu
    Mux16(a=arout,b=inM,sel=instruction[12],out=aorm);

    //Main ALU and PC implementation
    ALU(x=drout,y=aorm,zx=instruction[11],nx=instruction[10],zy=instruction[9],ny=instruction[8],f=instruction[7],no=instruction[6],out=aluout,out=outM,zr=zr,ng=ng);
    PC(in=arout,load=jmp,inc=true,reset=reset,out[0..14]=pc);

}
